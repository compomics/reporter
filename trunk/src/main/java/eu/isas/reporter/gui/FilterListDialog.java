package eu.isas.reporter.gui;

import java.io.File;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;

/**
 * This dialog will allow the user to modify the list of selected files.
 *
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class FilterListDialog extends javax.swing.JDialog {

    /**
     * List of selected files
     */
    private ArrayList<File> files;
    /**
     * Array indicating the user's selection
     */
    private ArrayList<Boolean> selection = new ArrayList<Boolean>();
    /**
     * The parent start panel
     */
    private StartPanel startPanel;
    /**
     * boolean indicating whether these files are identification files (true) or specrum files (false)
     */
    private boolean idFiles;

    /**
     * The main constructor
     * @param parent        The parent frame
     * @param modal         boolean indicating whether the dialog is modal
     * @param startPanel    The start panel
     * @param files         The selected files
     * @param idFiles       boolean indicating whether these files are identification files
     */
    public FilterListDialog(java.awt.Frame parent, boolean modal, StartPanel startPanel, ArrayList<File> files, boolean idFiles) {
        super(parent, modal);
        this.files = files;
        this.idFiles = idFiles;
        initComponents();

        // disables the user to drag column headers to reorder columns
        fileJTable.getTableHeader().setReorderingAllowed(false);

        fileJTable.getColumn(" ").setMaxWidth(40);
        fileJTable.getColumn(" ").setMinWidth(40);

        this.startPanel = startPanel;

        for (File file : files) {
            selection.add(false);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileJTable = new javax.swing.JTable();
        addJButton = new javax.swing.JButton();
        removeJButton = new javax.swing.JButton();
        clearJButton = new javax.swing.JButton();
        okJButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit File Selection");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Selected Files"));

        fileJTable.setModel(new FileListTable());
        jScrollPane1.setViewportView(fileJTable);

        addJButton.setText("Add");
        addJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJButtonActionPerformed(evt);
            }
        });

        removeJButton.setText("Remove");
        removeJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeJButtonActionPerformed(evt);
            }
        });

        clearJButton.setText("Clear");
        clearJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(removeJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addJButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(clearJButton, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addJButton, clearJButton, removeJButton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(addJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removeJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearJButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        okJButton.setText("OK");
        okJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(okJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(14, 14, 14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(okJButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJButtonActionPerformed

        if (idFiles) {
            JFileChooser fileChooser = new JFileChooser(startPanel.getLastSelectedFolder());
            fileChooser.setDialogTitle("Select Identification File(s)");
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            fileChooser.setMultiSelectionEnabled(true);

            FileFilter filter = new FileFilter() {

                public boolean accept(File myFile) {
                    return myFile.getName().endsWith("dat")
                            || myFile.getName().endsWith("omx")
                            || myFile.getName().endsWith("xml")
                            || myFile.isDirectory();
                }

                public String getDescription() {
                    return "Supported formats: Mascot (.dat), OMSSA (.omx), X!Tandem (.xml)";
                }
            };

            fileChooser.setFileFilter(filter);
            int returnVal = fileChooser.showDialog(this.getParent(), "Add");
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                for (File newFile : fileChooser.getSelectedFiles()) {
                    if (newFile.isDirectory()) {
                        File[] tempFiles = newFile.listFiles();
                        for (File file : tempFiles) {
                            if (file.getName().endsWith("dat")) {
                                files.add(file);
                            }
                        }
                    } else {
                        files.add(newFile);
                    }

                    startPanel.setLastSelectedFolder(newFile.getPath());
                }

                selection = new ArrayList<Boolean>();

                for (File file : files) {
                    selection.add(false);
                }

                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        fileJTable.revalidate();
                        fileJTable.repaint();
                    }
                });
            }
        } else {
            JFileChooser fileChooser = new JFileChooser(startPanel.getLastSelectedFolder());
            fileChooser.setDialogTitle("Select Spectra File(s)");
            fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
            fileChooser.setMultiSelectionEnabled(true);

            FileFilter filter = new FileFilter() {

                public boolean accept(File myFile) {
                    return myFile.getName().endsWith("mgf")
                            || myFile.isDirectory();
                }

                public String getDescription() {
                    return "Supported formats: .mgf";
                }
            };

            fileChooser.setFileFilter(filter);

            int returnVal = fileChooser.showDialog(this.getParent(), "Add");

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                for (File newFile : fileChooser.getSelectedFiles()) {
                    if (newFile.isDirectory()) {
                        File[] tempFiles = newFile.listFiles();
                        for (File file : tempFiles) {
                            if (file.getName().endsWith("mgf")) {
                                if (!files.contains(file)) {
                                    files.add(file);
                                }
                            }
                        }
                    } else {
                        if (newFile.getName().endsWith("mgf")) {
                            if (!files.contains(newFile)) {
                                files.add(newFile);
                            }
                        }
                    }

                    startPanel.setLastSelectedFolder(newFile.getPath());
                }

                selection = new ArrayList<Boolean>();

                for (File file : files) {
                    selection.add(false);
                }

                SwingUtilities.invokeLater(new Runnable() {

                    public void run() {
                        fileJTable.revalidate();
                        fileJTable.repaint();
                    }
                });
            }
        }
}//GEN-LAST:event_addJButtonActionPerformed

    private void removeJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeJButtonActionPerformed
        int cpt = 0;

        for (int i = 0; i < selection.size(); i++) {
            if (selection.get(i)) {
                files.remove(i - cpt);
                cpt++;
            }
        }
        
        selection = new ArrayList<Boolean>();
        
        for (File file : files) {
            selection.add(false);
        }

        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                fileJTable.revalidate();
                fileJTable.repaint();
            }
        });
}//GEN-LAST:event_removeJButtonActionPerformed

    private void clearJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearJButtonActionPerformed
        files = new ArrayList<File>();
        selection = new ArrayList<Boolean>();
        
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                fileJTable.revalidate();
                fileJTable.repaint();
            }
        });
}//GEN-LAST:event_clearJButtonActionPerformed

    private void okJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okJButtonActionPerformed

        if (idFiles) {
            startPanel.setIdFiles(files);
        } else {
            startPanel.setSpectraFiles(files);
        }

        this.dispose();
}//GEN-LAST:event_okJButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton clearJButton;
    private javax.swing.JTable fileJTable;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okJButton;
    private javax.swing.JButton removeJButton;
    // End of variables declaration//GEN-END:variables

    /**
     * Table model for the file list
     */
    private class FileListTable extends DefaultTableModel {

        @Override
        public int getRowCount() {
            return files.size();
        }

        @Override
        public int getColumnCount() {
            return 2;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0:
                    return "File";
                case 1:
                    return " ";
                default:
                    return "";
            }
        }

        @Override
        public Object getValueAt(int row, int column) {
            switch (column) {
                case 0:
                    return files.get(row).getName();
                case 1:
                    return selection.get(row);
                default:
                    return "";
            }
        }

        @Override
        public void setValueAt(Object aValue, int row, int column) {
            if (column == 1) {
                selection.set(row, !selection.get(row));
            }
        }

        @Override
        public Class getColumnClass(int columnIndex) {
            return getValueAt(0, columnIndex).getClass();
        }
    }
}
