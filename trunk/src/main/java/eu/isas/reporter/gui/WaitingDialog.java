package eu.isas.reporter.gui;

import eu.isas.reporter.calculation.ItraqCalculator;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;

/**
 * @TODO: JavaDoc missing
 *
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class WaitingDialog extends javax.swing.JDialog {

    private boolean runCancelled = false;
    private boolean runFinished = false;
    /**
     * Convenience date format
     */
    private static final SimpleDateFormat sdf = new SimpleDateFormat("dd MMM yyyy, HH:mm");
    private ItraqCalculator iTraqCalculator;

    /**
     * @TODO: JavaDoc missing
     *
     * @param parent
     * @param modal
     * @param projectName
     * @param iTraqCalculator
     */
    public WaitingDialog(java.awt.Frame parent, boolean modal, ItraqCalculator iTraqCalculator) {
        super(parent, modal);
        this.iTraqCalculator = iTraqCalculator;
        initComponents();
        this.setTitle(this.getTitle() + " - " + iTraqCalculator.getExperiment().getReference());
        reportArea.setText("Reporter Calculation Report:\n\n");
    }

    /**
     * Sets the run finished
     */
    public void setRunFinished() {
        if (progressBar.isIndeterminate()) {
            progressBar.setIndeterminate(false);
        }
        progressBar.setValue(progressBar.getMaximum());
        progressBar.setStringPainted(true);
        progressBar.setString("Calculation Completed.");
        closeButton.setText("Open");
        reportArea.append("\nTo view the results, click the Open button.");
        saveButton.setEnabled(true);
        runFinished = true;
    }

    /**
     * Sets the run canceled
     */
    public void setRunCancelled() {
        if (progressBar.isIndeterminate()) {
            progressBar.setIndeterminate(false);
        }

        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                progressBar.setValue(0);
                progressBar.setStringPainted(true);
                progressBar.setString("Calculation Cancelled!");
            }
        });

        closeButton.setText("Close");
        saveButton.setEnabled(true);
        runCancelled = true;
    }

    /**
     * Sets a text on the progress bar
     *
     * @param text  text to be written on the progress bar
     */
    public void setProgressbarText(String text) {
        progressBar.setStringPainted(true);
        progressBar.setString(text);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        reportArea = new javax.swing.JTextArea();
        closeButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reporter Calculation");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Processing Progress"));

        progressBar.setIndeterminate(true);

        reportArea.setBackground(new java.awt.Color(254, 254, 254));
        reportArea.setColumns(20);
        reportArea.setEditable(false);
        reportArea.setLineWrap(true);
        reportArea.setRows(5);
        jScrollPane1.setViewportView(reportArea);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 718, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 368, Short.MAX_VALUE)
                .addContainerGap())
        );

        closeButton.setText("Cancel");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save Report");
        saveButton.setEnabled(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {closeButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @TODO: JavaDoc missing
     *
     * @param evt
     */
    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        if (runFinished) {
            iTraqCalculator.displayResults();
            this.dispose();
        } else if (runCancelled) {
            this.dispose();
        } else {
            runCancelled = true;
            closeButton.setText("Close");
            saveButton.setEnabled(true);
            appendReport("Run cancelled.");
        }
}//GEN-LAST:event_closeButtonActionPerformed

    /**
     * @TODO: JavaDoc missing
     *
     * @param evt
     */
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        File outputFile = null;
        JFileChooser fc = new JFileChooser();
        int result = fc.showSaveDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            outputFile = fc.getSelectedFile();
            if (outputFile.exists()) {
                int choice = JOptionPane.showConfirmDialog(this,
                        new String[]{"The file " + outputFile.getName() + " already exists!", "Overwrite?"},
                        "File Already Exists", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.NO_OPTION) {
                    return;
                }
            } else {
                return;
            }
        }
        if (outputFile != null) {
            saveReport(outputFile);
        }
}//GEN-LAST:event_saveButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JTextArea reportArea;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @TODO: JavaDoc missing
     *
     * @return
     */
    public boolean isRunCancelled() {
        return runCancelled;
    }

    /**
     * @TODO: JavaDoc missing
     *
     * @param report
     */
    public void appendReport(String report) {
        Date date = new Date();
        reportArea.append(date + "\t" + report + "\n");
    }

    /**
     * Saves the report in the given file
     *
     * @param aFile file to save the report in
     */
    private void saveReport(File aFile) {
        StringBuffer output = new StringBuffer();
        String host = " @ ";

        try {
            host += InetAddress.getLocalHost().getHostName();


        } catch (UnknownHostException uhe) {
            // Disregard. It's not so bad if we can not report this.
        }

        // Write the file header.
        output.append("# ------------------------------------------------------------------"
                + "\n# SearchGUI Report File"
                + "\n#"
                + "\n# Originally saved by: " + System.getProperty("user.name") + host
                + "\n#                  on: " + sdf.format(new Date())
                + "\n#                  as: " + aFile.getName()
                + "\n# ------------------------------------------------------------------\n");

        output.append(reportArea.getText() + "\n");

        BufferedWriter bw = null;

        try {
            bw = new BufferedWriter(new FileWriter(aFile));
            bw.write(output.toString());
            bw.flush();
            JOptionPane.showMessageDialog(this, "Settings written to file '" + aFile.getAbsolutePath() + "'.", "Settings Saved", JOptionPane.INFORMATION_MESSAGE);


        } catch (IOException ioe) {
            JOptionPane.showMessageDialog(this, new String[]{"Error writing report to file:", ioe.getMessage()}, "Save Failed", JOptionPane.ERROR_MESSAGE);

        } finally {
            if (bw != null) {
                try {
                    bw.close();

                } catch (IOException ioe) {
                    JOptionPane.showMessageDialog(this, new String[]{"Error writing report to file:", ioe.getMessage()}, "Save Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
}
