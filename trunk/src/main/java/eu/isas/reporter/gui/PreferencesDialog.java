package eu.isas.reporter.gui;

import com.compomics.util.examples.BareBonesBrowserLaunch;
import com.compomics.util.experiment.identification.SearchParameters;
import com.compomics.util.gui.renderers.AlignedListCellRenderer;
import eu.isas.peptideshaker.scoring.MatchValidationLevel;
import eu.isas.reporter.myparameters.RatioEstimationSettings;
import eu.isas.reporter.myparameters.ReporterIonSelectionSettings;
import eu.isas.reporter.myparameters.ReporterPreferences;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

/**
 * The preferences dialog.
 *
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class PreferencesDialog extends javax.swing.JDialog {

    /**
     * The parent dialog.
     */
    private NewDialog newDialog;
    /**
     * The identification parameters
     */
    private SearchParameters searchParameters;

    /**
     * Creates a new PreferencesDialog.
     *
     * @param newDialog reference to the NewDialog
     * @param searchParameters the identification parameters
     * @param modal if the dialog is to be modal or not
     */
    public PreferencesDialog(NewDialog newDialog, SearchParameters searchParameters, boolean modal) {
        super(newDialog, modal);
        this.newDialog = newDialog;
        this.searchParameters = searchParameters;
        initComponents();
        setUpGui();
        loadValues();
        updateModificationList();
        setLocationRelativeTo(newDialog);
        setVisible(true);
    }

    /**
     * Set up the GUI.
     */
    private void setUpGui() {

        sameSpectraActionPerformed(null);

        // centrally align the comboboxes
        proteinValidationCmb.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        peptideValidationCmb.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        psmValidationCmb.setRenderer(new AlignedListCellRenderer(SwingConstants.CENTER));
        
        ReporterIonSelectionSettings reporterIonSelectionSettings = newDialog.getReporterPreferences().getReporterIonSelectionSettings();
        ionToleranceTxt.setText(reporterIonSelectionSettings.getReporterIonsMzTolerance() + "");
        if (reporterIonSelectionSettings.isSameSpectra()) {
            sameSpectra.setSelected(true);
            precursorMatching.setSelected(false);
        } else {
            sameSpectra.setSelected(false);
            precursorMatching.setSelected(true);
            mzTolTxt.setText(reporterIonSelectionSettings.getPrecursorMzTolerance() + "");
            rtTolTxt.setText(reporterIonSelectionSettings.getPrecursorRTTolerance() + "");
        }

        mzTolTxt.setText(searchParameters.getPrecursorAccuracy() + "");
        if (searchParameters.isPrecursorAccuracyTypePpm()) {
            ppmCmb.setSelectedIndex(0);
        } else {
            ppmCmb.setSelectedIndex(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reporterLocationButtonGroup = new javax.swing.ButtonGroup();
        backgroundPanel = new javax.swing.JPanel();
        idSelectionPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        selectedPtmsScrollPane = new javax.swing.JScrollPane();
        selectedPTMs = new javax.swing.JList();
        allPtmsScrollPane = new javax.swing.JScrollPane();
        allPTMs = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        addModifications = new javax.swing.JButton();
        removeModification = new javax.swing.JButton();
        miscleavageCheck = new javax.swing.JCheckBox();
        ratioEstimationsPanel = new javax.swing.JPanel();
        nullIntensitiesCheck = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        widthTxt = new javax.swing.JTextField();
        resolutionTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        peptideValidationCmb = new javax.swing.JComboBox();
        proteinValidationCmb = new javax.swing.JComboBox();
        psmValidationCmb = new javax.swing.JComboBox();
        helpLabel = new javax.swing.JLabel();
        helpLinkLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        spectrumAnalysisPanel = new javax.swing.JPanel();
        reporterIonMzToleranceLabel = new javax.swing.JLabel();
        ionToleranceTxt = new javax.swing.JTextField();
        reporterLocationPanel = new javax.swing.JPanel();
        sameSpectra = new javax.swing.JRadioButton();
        precursorMatching = new javax.swing.JRadioButton();
        mzToleranceLabel = new javax.swing.JLabel();
        mzTolTxt = new javax.swing.JTextField();
        ppmCmb = new javax.swing.JComboBox();
        rtToleranceLabel = new javax.swing.JLabel();
        rtTolTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quantification Advanced Settings");
        setResizable(false);

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        idSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Peptide Selection"));
        idSelectionPanel.setOpaque(false);

        jLabel1.setFont(jLabel1.getFont().deriveFont((jLabel1.getFont().getStyle() | java.awt.Font.ITALIC)));
        jLabel1.setText("Exclude peptides with the following PTMs");

        selectedPtmsScrollPane.setViewportView(selectedPTMs);

        allPTMs.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        allPtmsScrollPane.setViewportView(allPTMs);

        jLabel8.setFont(jLabel8.getFont().deriveFont((jLabel8.getFont().getStyle() | java.awt.Font.ITALIC)));
        jLabel8.setText("Available PTMs");

        addModifications.setText("<<");
        addModifications.setToolTipText("Add to list of expected modifications");
        addModifications.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addModificationsActionPerformed(evt);
            }
        });

        removeModification.setText(">>");
        removeModification.setToolTipText("Remove from list of selected modifications");
        removeModification.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeModificationActionPerformed(evt);
            }
        });

        miscleavageCheck.setText("Exclude Miscleaved Peptides");
        miscleavageCheck.setIconTextGap(10);
        miscleavageCheck.setOpaque(false);

        javax.swing.GroupLayout idSelectionPanelLayout = new javax.swing.GroupLayout(idSelectionPanel);
        idSelectionPanel.setLayout(idSelectionPanelLayout);
        idSelectionPanelLayout.setHorizontalGroup(
            idSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(idSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(idSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(idSelectionPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(miscleavageCheck))
                    .addGroup(idSelectionPanelLayout.createSequentialGroup()
                        .addGroup(idSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(idSelectionPanelLayout.createSequentialGroup()
                                .addComponent(selectedPtmsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(idSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(addModifications, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(removeModification)))
                            .addGroup(idSelectionPanelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel1)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(idSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(allPtmsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(idSelectionPanelLayout.createSequentialGroup()
                                .addGap(8, 8, 8)
                                .addComponent(jLabel8)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        idSelectionPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {allPtmsScrollPane, selectedPtmsScrollPane});

        idSelectionPanelLayout.setVerticalGroup(
            idSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(idSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(idSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(idSelectionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGroup(idSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(idSelectionPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selectedPtmsScrollPane))
                            .addGroup(idSelectionPanelLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addComponent(addModifications)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeModification))))
                    .addGroup(idSelectionPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(allPtmsScrollPane)))
                .addGap(7, 7, 7)
                .addComponent(miscleavageCheck)
                .addContainerGap())
        );

        ratioEstimationsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Ratio Estimation"));
        ratioEstimationsPanel.setOpaque(false);

        nullIntensitiesCheck.setText("Exclude Missing Intensities");
        nullIntensitiesCheck.setIconTextGap(10);
        nullIntensitiesCheck.setOpaque(false);

        jLabel4.setText("Resolution");

        jLabel5.setText("Window Width (%)");

        widthTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        resolutionTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel2.setText("Protein Filter");

        jLabel3.setText("Peptide Filter");

        jLabel7.setText("PSM Filter");

        peptideValidationCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Validated", "Confident" }));

        proteinValidationCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Validated", "Confident" }));

        psmValidationCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "All", "Validated", "Confident" }));

        javax.swing.GroupLayout ratioEstimationsPanelLayout = new javax.swing.GroupLayout(ratioEstimationsPanel);
        ratioEstimationsPanel.setLayout(ratioEstimationsPanelLayout);
        ratioEstimationsPanelLayout.setHorizontalGroup(
            ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ratioEstimationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ratioEstimationsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(proteinValidationCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(ratioEstimationsPanelLayout.createSequentialGroup()
                        .addGroup(ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(psmValidationCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(peptideValidationCmb, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(44, 44, 44)
                .addGroup(ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nullIntensitiesCheck)
                    .addGroup(ratioEstimationsPanelLayout.createSequentialGroup()
                        .addGroup(ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(widthTxt)
                            .addComponent(resolutionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ratioEstimationsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel2, jLabel3, jLabel7});

        ratioEstimationsPanelLayout.setVerticalGroup(
            ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ratioEstimationsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resolutionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(proteinValidationCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(widthTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel3)
                    .addComponent(peptideValidationCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ratioEstimationsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nullIntensitiesCheck)
                    .addComponent(jLabel7)
                    .addComponent(psmValidationCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        helpLabel.setFont(helpLabel.getFont().deriveFont((helpLabel.getFont().getStyle() | java.awt.Font.ITALIC)));
        helpLabel.setText("For ratio estimation help see:");

        helpLinkLabel.setText("<html> <a href=\\\"dummy_link\">Burkhart et al.  (2011) [PMID: 21328540]</a>.</html>");
        helpLinkLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                helpLinkLabelMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                helpLinkLabelMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                helpLinkLabelMouseExited(evt);
            }
        });

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        spectrumAnalysisPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Spectrum Analysis"));
        spectrumAnalysisPanel.setOpaque(false);

        reporterIonMzToleranceLabel.setText("Reporter Tolerance (m/z)");

        ionToleranceTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout spectrumAnalysisPanelLayout = new javax.swing.GroupLayout(spectrumAnalysisPanel);
        spectrumAnalysisPanel.setLayout(spectrumAnalysisPanelLayout);
        spectrumAnalysisPanelLayout.setHorizontalGroup(
            spectrumAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spectrumAnalysisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reporterIonMzToleranceLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(ionToleranceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        spectrumAnalysisPanelLayout.setVerticalGroup(
            spectrumAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(spectrumAnalysisPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(spectrumAnalysisPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(reporterIonMzToleranceLabel)
                    .addComponent(ionToleranceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        reporterLocationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Reporter Location"));
        reporterLocationPanel.setOpaque(false);

        reporterLocationButtonGroup.add(sameSpectra);
        sameSpectra.setSelected(true);
        sameSpectra.setText("Same Spectra");
        sameSpectra.setIconTextGap(10);
        sameSpectra.setOpaque(false);
        sameSpectra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sameSpectraActionPerformed(evt);
            }
        });

        reporterLocationButtonGroup.add(precursorMatching);
        precursorMatching.setText("Precursor Matching");
        precursorMatching.setIconTextGap(10);
        precursorMatching.setOpaque(false);
        precursorMatching.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precursorMatchingActionPerformed(evt);
            }
        });

        mzToleranceLabel.setText("m/z tolerance");

        mzTolTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        ppmCmb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ppm", "m/z" }));

        rtToleranceLabel.setText("RT tolerance (s)");

        rtTolTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        rtTolTxt.setText("10");
        rtTolTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtTolTxtActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout reporterLocationPanelLayout = new javax.swing.GroupLayout(reporterLocationPanel);
        reporterLocationPanel.setLayout(reporterLocationPanelLayout);
        reporterLocationPanelLayout.setHorizontalGroup(
            reporterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporterLocationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(reporterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sameSpectra, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(precursorMatching, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(reporterLocationPanelLayout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(reporterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rtToleranceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(mzToleranceLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(reporterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rtTolTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(reporterLocationPanelLayout.createSequentialGroup()
                                .addComponent(mzTolTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ppmCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        reporterLocationPanelLayout.setVerticalGroup(
            reporterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(reporterLocationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(sameSpectra)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(precursorMatching)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reporterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mzToleranceLabel)
                    .addComponent(mzTolTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ppmCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(reporterLocationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rtToleranceLabel)
                    .addComponent(rtTolTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(helpLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(helpLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(reporterLocationPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(spectrumAnalysisPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ratioEstimationsPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(idSelectionPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(spectrumAnalysisPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ratioEstimationsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reporterLocationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(idSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(helpLabel)
                    .addComponent(helpLinkLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(okButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Changes the cursor to the hand cursor when over the help link.
     *
     * @param evt
     */
    private void helpLinkLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLinkLabelMouseEntered
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_helpLinkLabelMouseEntered

    /**
     * Changes the cursor back to the default cursor when leaving the help link.
     *
     * @param evt
     */
    private void helpLinkLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLinkLabelMouseExited
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_helpLinkLabelMouseExited

    /**
     * Opens the help link in the web browser.
     *
     * @param evt
     */
    private void helpLinkLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_helpLinkLabelMouseClicked
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        BareBonesBrowserLaunch.openURL("http://onlinelibrary.wiley.com/doi/10.1002/pmic.201000711/abstract");
        this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_helpLinkLabelMouseClicked

    /**
     * Add a modification to the list.
     *
     * @param evt
     */
    private void addModificationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addModificationsActionPerformed

        int nSelected = selectedPTMs.getModel().getSize();
        int nNew = allPTMs.getSelectedIndices().length;
        String[] fixedModifications = new String[nSelected + nNew];
        int cpt = 0;

        for (int i = 0; i < nSelected; i++) {
            fixedModifications[cpt] = (String) selectedPTMs.getModel().getElementAt(i);
            cpt++;
        }
        boolean found;
        for (Object selection : allPTMs.getSelectedValuesList()) {
            String name = (String) selection;
            found = false;
            for (int i = 0; i < selectedPTMs.getModel().getSize(); i++) {
                if (((String) selectedPTMs.getModel().getElementAt(i)).equals(name)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                fixedModifications[cpt] = name;
                cpt++;
            }
        }
        selectedPTMs.setListData(fixedModifications);
        updateModificationList();
    }//GEN-LAST:event_addModificationsActionPerformed

    /**
     * Remove a modification from the list.
     *
     * @param evt
     */
    private void removeModificationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeModificationActionPerformed

        int nSelected = selectedPTMs.getModel().getSize();
        int nToRemove = selectedPTMs.getSelectedIndices().length;
        String[] variableModifications = new String[nSelected - nToRemove];
        int cpt = 0;
        boolean found;
        for (int i = 0; i < selectedPTMs.getModel().getSize(); i++) {
            found = false;
            for (Object selection : selectedPTMs.getSelectedValuesList()) {
                if (((String) selectedPTMs.getModel().getElementAt(i)).equals((String) selection)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                variableModifications[cpt] = (String) selectedPTMs.getModel().getElementAt(i);
                cpt++;
            }
        }
        selectedPTMs.setListData(variableModifications);
        updateModificationList();
    }//GEN-LAST:event_removeModificationActionPerformed

    /**
     * Save the data and close the dialog.
     *
     * @param evt
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (validateInput()) {
            saveValues();
            dispose();
        }
    }//GEN-LAST:event_okButtonActionPerformed

    private void sameSpectraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sameSpectraActionPerformed
        // enable or disable the precursor matching options
        mzToleranceLabel.setEnabled(precursorMatching.isSelected());
        mzTolTxt.setEnabled(precursorMatching.isSelected());
        ppmCmb.setEnabled(precursorMatching.isSelected());
        rtToleranceLabel.setEnabled(precursorMatching.isSelected());
        rtTolTxt.setEnabled(precursorMatching.isSelected());
    }//GEN-LAST:event_sameSpectraActionPerformed

    private void precursorMatchingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precursorMatchingActionPerformed
        sameSpectraActionPerformed(null);
    }//GEN-LAST:event_precursorMatchingActionPerformed

    private void rtTolTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtTolTxtActionPerformed
        // @TODO: validate the input
    }//GEN-LAST:event_rtTolTxtActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addModifications;
    private javax.swing.JList allPTMs;
    private javax.swing.JScrollPane allPtmsScrollPane;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JLabel helpLabel;
    private javax.swing.JLabel helpLinkLabel;
    private javax.swing.JPanel idSelectionPanel;
    private javax.swing.JTextField ionToleranceTxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JCheckBox miscleavageCheck;
    private javax.swing.JTextField mzTolTxt;
    private javax.swing.JLabel mzToleranceLabel;
    private javax.swing.JCheckBox nullIntensitiesCheck;
    private javax.swing.JButton okButton;
    private javax.swing.JComboBox peptideValidationCmb;
    private javax.swing.JComboBox ppmCmb;
    private javax.swing.JRadioButton precursorMatching;
    private javax.swing.JComboBox proteinValidationCmb;
    private javax.swing.JComboBox psmValidationCmb;
    private javax.swing.JPanel ratioEstimationsPanel;
    private javax.swing.JButton removeModification;
    private javax.swing.JLabel reporterIonMzToleranceLabel;
    private javax.swing.ButtonGroup reporterLocationButtonGroup;
    private javax.swing.JPanel reporterLocationPanel;
    private javax.swing.JTextField resolutionTxt;
    private javax.swing.JTextField rtTolTxt;
    private javax.swing.JLabel rtToleranceLabel;
    private javax.swing.JRadioButton sameSpectra;
    private javax.swing.JList selectedPTMs;
    private javax.swing.JScrollPane selectedPtmsScrollPane;
    private javax.swing.JPanel spectrumAnalysisPanel;
    private javax.swing.JTextField widthTxt;
    // End of variables declaration//GEN-END:variables

    /**
     * Loads values from the quantificationPreferences.
     */
    private void loadValues() {
        
        RatioEstimationSettings ratioEstimationSettings = newDialog.getReporterPreferences().getRatioEstimationSettings();
        miscleavageCheck.setSelected(ratioEstimationSettings.isIgnoreMissedCleavages());
        nullIntensitiesCheck.setSelected(ratioEstimationSettings.isIgnoreNullIntensities());
        widthTxt.setText(ratioEstimationSettings.getPercentile() + "");
        resolutionTxt.setText(ratioEstimationSettings.getRatioResolution() + "");

        ArrayList<String> selectedModificationsList = ratioEstimationSettings.getexcludingPtms();
        String[] allModificationsAsArray = new String[selectedModificationsList.size()];
        for (int i = 0; i < selectedModificationsList.size(); i++) {
            allModificationsAsArray[i] = selectedModificationsList.get(i);
        }
        selectedPTMs.setListData(allModificationsAsArray);
        updateModificationList();

        proteinValidationCmb.setSelectedIndex(ratioEstimationSettings.getProteinValidationLevel().getIndex());
        peptideValidationCmb.setSelectedIndex(ratioEstimationSettings.getPeptideValidationLevel().getIndex());
        psmValidationCmb.setSelectedIndex(ratioEstimationSettings.getPsmValidationLevel().getIndex());
    }

    /**
     * Saves the values in the quantificationPreferences.
     */
    private void saveValues() {

        RatioEstimationSettings ratioEstimationSettings = newDialog.getReporterPreferences().getRatioEstimationSettings();
        ratioEstimationSettings.setIgnoreMissedCleavages(miscleavageCheck.isSelected());
        ratioEstimationSettings.setIgnoreNullIntensities(nullIntensitiesCheck.isSelected());
        ratioEstimationSettings.setPercentile(new Double(widthTxt.getText()));
        ratioEstimationSettings.setRatioResolution(new Double(resolutionTxt.getText()));
        ratioEstimationSettings.emptyPTMList();

        for (int j = 0; j < selectedPTMs.getModel().getSize(); j++) {
            String name = (String) selectedPTMs.getModel().getElementAt(j);
            ratioEstimationSettings.addExcludingPtm(name);
        }

        ratioEstimationSettings.setProteinValidationLevel(MatchValidationLevel.getMatchValidationLevel(proteinValidationCmb.getSelectedIndex()));
        ratioEstimationSettings.setPeptideValidationLevel(MatchValidationLevel.getMatchValidationLevel(peptideValidationCmb.getSelectedIndex()));
        ratioEstimationSettings.setPsmValidationLevel(MatchValidationLevel.getMatchValidationLevel(psmValidationCmb.getSelectedIndex()));

        ReporterIonSelectionSettings reporterIonSelectionSettings = newDialog.getReporterPreferences().getReporterIonSelectionSettings();
        reporterIonSelectionSettings.setReporterIonsMzTolerance(new Double(ionToleranceTxt.getText()));
        if (sameSpectra.isSelected()) {
            reporterIonSelectionSettings.setSameSpectra(true);
        } else {
            reporterIonSelectionSettings.setSameSpectra(false);
            reporterIonSelectionSettings.setPrecursorMzTolerance(new Double(mzTolTxt.getText()));
            reporterIonSelectionSettings.setPrecursorRTTolerance(new Double(rtTolTxt.getText()));
        }

        ReporterPreferences.saveUserPreferences(newDialog.getReporterPreferences());
    }

    /**
     * Methods which validates the user input (returns false in case of wrong
     * input).
     *
     * @return true if the input can be processed
     */
    private boolean validateInput() {

        // check the ion torerance
        double ionTolerance;
        try {
            ionTolerance = new Double(ionToleranceTxt.getText().trim());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please input a number for the ion tolerance.", "Ion Tolerance Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        if (ionTolerance <= 0) {
            JOptionPane.showMessageDialog(this, "Please input a positive number for the ion tolerance.", "Ion Tolerance Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        for (String reagent1 : newDialog.getSelectedMethod().getReagentNames()) {
            for (String reagent2 : newDialog.getSelectedMethod().getReagentNames()) {
                if (!reagent1.equals(reagent2) && Math.abs(newDialog.getSelectedMethod().getReagent(reagent1).getReporterIon().getTheoreticMass()
                        - newDialog.getSelectedMethod().getReagent(reagent2).getReporterIon().getTheoreticMass()) <= ionTolerance) {
                    JOptionPane.showMessageDialog(this, "The ion tolerance does not allow distinction of " + reagent1 + " and  " + reagent2 + ".", "Ion Tolerance Error", JOptionPane.ERROR_MESSAGE);
                    return false;
                }
            }
        }

        // check the precursor matching
        if (precursorMatching.isSelected()) {
            try {
                new Double(mzTolTxt.getText().trim());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please input a number for precursor m/z tolerance.", "Matching Tolerance Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            try {
                new Double(rtTolTxt.getText().trim());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please input a number for precursor RT tolerance.", "RT Tolerance Error", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }

        // check the window width
        try {
            new Double(widthTxt.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "please enter a correct window width.", "Window width error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            new Double(resolutionTxt.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "please enter a correct ratio resolution.", "Ratio resolution error", JOptionPane.ERROR_MESSAGE);
            return false;
        }

        return true;
    }

    /**
     * Updates the modification list (right).
     */
    private void updateModificationList() {
        ArrayList<String> allModificationsList = new ArrayList<String>(searchParameters.getModificationProfile().getAllNotFixedModifications());
        int nSelected = selectedPTMs.getModel().getSize();
        ArrayList<String> allModifications = new ArrayList<String>();

        for (String name : allModificationsList) {
            boolean found = false;
            for (int j = 0; j < nSelected; j++) {
                if (((String) selectedPTMs.getModel().getElementAt(j)).equals(name)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                allModifications.add(name);
            }
        }

        String[] allModificationsAsArray = new String[allModifications.size()];

        for (int i = 0; i < allModifications.size(); i++) {
            allModificationsAsArray[i] = allModifications.get(i);
        }

        Arrays.sort(allModificationsAsArray);
        allPTMs.setListData(allModificationsAsArray);
        allPTMs.setSelectedIndex(0);
    }
}
