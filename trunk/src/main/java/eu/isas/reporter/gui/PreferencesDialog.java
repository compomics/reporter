package eu.isas.reporter.gui;

import com.compomics.util.experiment.biology.PTM;
import com.compomics.util.experiment.biology.PTMFactory;
import eu.isas.reporter.myparameters.QuantificationPreferences;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import javax.swing.JOptionPane;

/**
 * The preferences dialog.
 * 
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class PreferencesDialog extends javax.swing.JDialog {

    /**
     * The Reproter GUI parent.
     */
    private ReporterGUI reporterGui;
    /**
     * The quantification preferences.
     */
    private QuantificationPreferences quantificationPreferences;
    /**
     * The ptms.
     */
    private HashMap<String, PTM> ptms = new HashMap<String, PTM>();
    /**
     * Modification file.
     */
    private final String MODIFICATIONS_FILE = "conf/reporter_mods.xml";
    /**
     * User modification file.
     */
    private final String USER_MODIFICATIONS_FILE = "conf/reporter_usermods.xml";
    /**
     * The compomics PTM factory.
     */
    private PTMFactory ptmFactory = PTMFactory.getInstance();

    /**
     * Creates new form PreferencesDialog
     * 
     * @param reporterGui reference to the ReporterGUI
     * @param quantificationPreferences the quantification preferences
     */
    public PreferencesDialog(ReporterGUI reporterGui, QuantificationPreferences quantificationPreferences) {
        super(reporterGui, true);
        this.reporterGui = reporterGui;
        this.quantificationPreferences = quantificationPreferences;
        initComponents();
        loadModifications();
        loadValues();
        updateModificationList();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        miscleavageCheck = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectedPTMs = new javax.swing.JList();
        addPTM = new javax.swing.JButton();
        removePTM = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        allPTMs = new javax.swing.JList();
        jLabel8 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        nullIntensitiesCheck = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ratioMaxTxt = new javax.swing.JTextField();
        ratioMinTxt = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        kTxt = new javax.swing.JTextField();
        resolutionTxt = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Identifications Selection"));

        miscleavageCheck.setText("Ignore miscleaved peptides");

        jLabel1.setText("Ignore peptides presenting the following PTMS:");

        jScrollPane1.setViewportView(selectedPTMs);

        addPTM.setText("<<");
        addPTM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPTMActionPerformed(evt);
            }
        });

        removePTM.setText(">>");
        removePTM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removePTMActionPerformed(evt);
            }
        });

        allPTMs.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(allPTMs);

        jLabel8.setText("Available PTMs:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(miscleavageCheck)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(addPTM)
                                    .addComponent(removePTM)))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))))
                .addContainerGap(200, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(miscleavageCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel8))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(addPTM)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removePTM))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE))))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Ratio estimation options"));

        nullIntensitiesCheck.setText("Ignore null intensities");

        jLabel2.setText("Minimal ratio:");

        jLabel3.setText("Maximal ratio:");

        jLabel4.setText("Resolution:");

        jLabel5.setText("Window width:");

        jLabel6.setText("*MAD");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nullIntensitiesCheck)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ratioMinTxt)
                            .addComponent(ratioMaxTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addGap(104, 104, 104)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(kTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addComponent(resolutionTxt)))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nullIntensitiesCheck)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(ratioMinTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resolutionTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ratioMaxTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(kTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setText("OK");
        okButton.setPreferredSize(new java.awt.Dimension(65, 23));
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 2, 11));
        jLabel7.setText("For help on ratio estimation details see PMID: 21328540");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 793, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cancelButton)
                    .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removePTMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removePTMActionPerformed
        int nSelected = selectedPTMs.getModel().getSize();
        int nToRemove = selectedPTMs.getSelectedIndices().length;
        String[] variableModifications = new String[nSelected - nToRemove];
        int cpt = 0;
        boolean found;
        for (int i = 0; i < selectedPTMs.getModel().getSize(); i++) {
            found = false;
            for (Object selection : selectedPTMs.getSelectedValues()) {
                if (((String) selectedPTMs.getModel().getElementAt(i)).equals((String) selection)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                variableModifications[cpt] = (String) selectedPTMs.getModel().getElementAt(i);
                cpt++;
            }
        }
        selectedPTMs.setListData(variableModifications);
        updateModificationList();
    }//GEN-LAST:event_removePTMActionPerformed

    private void addPTMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPTMActionPerformed
        int nSelected = selectedPTMs.getModel().getSize();
        int nNew = allPTMs.getSelectedIndices().length;
        String[] fixedModifications = new String[nSelected + nNew];
        int cpt = 0;
        String name;
        for (int i = 0; i < nSelected; i++) {
            fixedModifications[cpt] = (String) selectedPTMs.getModel().getElementAt(i);
            cpt++;
        }
        boolean found;
        for (Object selection : allPTMs.getSelectedValues()) {
            name = (String) selection;
            found = false;
            for (int i = 0; i < selectedPTMs.getModel().getSize(); i++) {
                if (((String) selectedPTMs.getModel().getElementAt(i)).equals(name)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                fixedModifications[cpt] = name;
                cpt++;
            }
        }
        selectedPTMs.setListData(fixedModifications);
        updateModificationList();
    }//GEN-LAST:event_addPTMActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        if (validateInput()) {
            saveValues();
            reporterGui.updateResults(quantificationPreferences);
            dispose();
        }
    }//GEN-LAST:event_okButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addPTM;
    private javax.swing.JList allPTMs;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField kTxt;
    private javax.swing.JCheckBox miscleavageCheck;
    private javax.swing.JCheckBox nullIntensitiesCheck;
    private javax.swing.JButton okButton;
    private javax.swing.JTextField ratioMaxTxt;
    private javax.swing.JTextField ratioMinTxt;
    private javax.swing.JButton removePTM;
    private javax.swing.JTextField resolutionTxt;
    private javax.swing.JList selectedPTMs;
    // End of variables declaration//GEN-END:variables

    /**
     * Loads values from the quantificationPreferences.
     */
    private void loadValues() {
        miscleavageCheck.setSelected(quantificationPreferences.isIgnoreMissedCleavages());
        nullIntensitiesCheck.setSelected(quantificationPreferences.isIgnoreNullIntensities());
        kTxt.setText(quantificationPreferences.getK() + "");
        ratioMinTxt.setText(quantificationPreferences.getRatioMin() + "");
        ratioMaxTxt.setText(quantificationPreferences.getRatioMax() + "");
        resolutionTxt.setText(quantificationPreferences.getRatioResolution() + "");
        ArrayList<String> selectedModificationsList = quantificationPreferences.getIgnoredPTM();
        String[] allModificationsAsArray = new String[selectedModificationsList.size()];
        for (int i = 0; i < selectedModificationsList.size(); i++) {
            allModificationsAsArray[i] = selectedModificationsList.get(i);
        }
        selectedPTMs.setListData(allModificationsAsArray);
        updateModificationList();
    }

    /**
     * Saves the values in the quantificationPreferences.
     */
    private void saveValues() {
        quantificationPreferences.setIgnoreMissedCleavages(miscleavageCheck.isSelected());
        quantificationPreferences.setIgnoreNullIntensities(nullIntensitiesCheck.isSelected());
        quantificationPreferences.setK(new Double(kTxt.getText()));
        quantificationPreferences.setRatioMin(new Double(ratioMinTxt.getText()));
        quantificationPreferences.setRatioMax(new Double(ratioMaxTxt.getText()));
        quantificationPreferences.setRatioResolution(new Double(resolutionTxt.getText()));
        quantificationPreferences.emptyPTMList();
        String name;
        for (int j = 0; j < selectedPTMs.getModel().getSize(); j++) {
            name = (String) selectedPTMs.getModel().getElementAt(j);
            quantificationPreferences.addIgnoredPTM(ptms.get(name));
        }
    }

    /**
     * Methods which validates the user input (returns false in case of wrong
     * input).
     *
     * @return true if the input can be processed
     */
    private boolean validateInput() {
        double test;
        try {
            test = new Double(kTxt.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "please enter a correct window width.", "Window width error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            test = new Double(ratioMinTxt.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "please enter a correct minimal ratio.", "Minimal ratio error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        try {
            test = new Double(resolutionTxt.getText());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "please enter a correct ratio resolution.", "Ratio resolution error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        return true;
    }

    /**
     * Loads the modifications from the modification file.
     */
    private void loadModifications() {
        try {
            ptmFactory.importModifications(new File(MODIFICATIONS_FILE));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error (" + e.getMessage() + ") occured when trying to load the modifications from " + MODIFICATIONS_FILE + ".",
                    "Configuration import Error", JOptionPane.ERROR_MESSAGE);
        }
        try {
            ptmFactory.importModifications(new File(USER_MODIFICATIONS_FILE));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error (" + e.getMessage() + ") occured when trying to load the modifications from " + USER_MODIFICATIONS_FILE + ".",
                    "Configuration import Error", JOptionPane.ERROR_MESSAGE);
        }
        for (PTM ptm : ptmFactory.getPtmMap().values()) {
            ptms.put(ptm.getName().toLowerCase(), ptm);
        }
    }

    /**
     * Updates the modification list (right).
     */
    private void updateModificationList() {
        ArrayList<String> allModificationsList = new ArrayList<String>(ptms.keySet());
        int nSelected = selectedPTMs.getModel().getSize();
        ArrayList<String> allModifications = new ArrayList<String>();

        boolean found = false;

        for (String name : allModificationsList) {
            found = false;
            for (int j = 0; j < nSelected; j++) {
                if (((String) selectedPTMs.getModel().getElementAt(j)).equals(name)) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                allModifications.add(name);
            }
        }

        String[] allModificationsAsArray = new String[allModifications.size()];

        for (int i = 0; i < allModifications.size(); i++) {
            allModificationsAsArray[i] = allModifications.get(i);
        }

        Arrays.sort(allModificationsAsArray);
        allPTMs.setListData(allModificationsAsArray);
        allPTMs.setSelectedIndex(0);
    }
}
