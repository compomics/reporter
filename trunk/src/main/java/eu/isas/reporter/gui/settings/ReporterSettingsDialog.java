package eu.isas.reporter.gui.settings;

import com.compomics.util.experiment.quantification.reporterion.ReporterMethod;
import com.compomics.util.preferences.ModificationProfile;
import eu.isas.reporter.gui.NewDialog;
import eu.isas.reporter.myparameters.NormalizationSettings;
import eu.isas.reporter.myparameters.RatioEstimationSettings;
import eu.isas.reporter.myparameters.ReporterIonSelectionSettings;
import eu.isas.reporter.myparameters.ReporterPreferences;
import eu.isas.reporter.myparameters.ReporterSettings;
import eu.isas.reporter.preferences.ReporterPathPreferences;
import javax.swing.JDialog;

/**
 * The preferences dialog.
 *
 * @author Marc Vaudel
 * @author Harald Barsnes
 */
public class ReporterSettingsDialog extends javax.swing.JDialog {

    /**
     * Boolean indicating whether the editing of the settings has been canceled.
     */
    private boolean canceled = false;
    /**
     * The reporter method used.
     */
    private ReporterMethod reporterMethod = null;
    /**
     * The modification profile of the search.
     */
    private ModificationProfile modificationProfile;
    /**
     * The settings for the selection of the reporter ions in spectra
     */
    private ReporterIonSelectionSettings reporterIonSelectionSettings;
    /**
     * The ratio estimation settings
     */
    private RatioEstimationSettings ratioEstimationSettings;
    /**
     * The normalization settings.
     */
    private NormalizationSettings normalizationSettings;
    /**
     * Boolean indicating whether the user can edit the settings.
     */
    private boolean editable;

    /**
     * Creates a new PreferencesDialog.
     *
     * @param parentDialog the parent dialog
     * @param reporterSettings the reporter settings to display
     * @param modificationProfile the modification profile of the search
     * @param reporterMethod the reporter method used
     * @param editable boolean indicating whether the settings can be edited
     */
    public ReporterSettingsDialog(JDialog parentDialog, ReporterSettings reporterSettings, ModificationProfile modificationProfile, ReporterMethod reporterMethod, boolean editable) {
        super(parentDialog, true);
        this.reporterIonSelectionSettings = reporterSettings.getReporterIonSelectionSettings();
        this.ratioEstimationSettings = reporterSettings.getRatioEstimationSettings();
        this.normalizationSettings = reporterSettings.getNormalizationSettings();
        this.modificationProfile = modificationProfile;
        this.reporterMethod = reporterMethod;
        this.editable = editable;
        initComponents();
        setUpGui(editable);
        populateGUI(reporterSettings);
        setLocationRelativeTo(parentDialog);
        setVisible(true);
    }

    /**
     * Set up the GUI.
     *
     * @param editable boolean indicating whether the settings can be edited
     */
    private void setUpGui(boolean editable) {

    }

    /**
     * Fills the gui with the given settings.
     *
     * @param reporterSettings the settings to display
     */
    private void populateGUI(ReporterSettings reporterSettings) {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        reporterLocationButtonGroup = new javax.swing.ButtonGroup();
        backgroundPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        reporterIonSelectionButton = new javax.swing.JButton();
        ratioEstimationButton = new javax.swing.JButton();
        normalizationButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quantification Advanced Settings");
        setResizable(false);

        backgroundPanel.setBackground(new java.awt.Color(230, 230, 230));

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        reporterIonSelectionButton.setText("Reporter Ion Selection");
        reporterIonSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reporterIonSelectionButtonActionPerformed(evt);
            }
        });

        ratioEstimationButton.setText("Ratio Estimation");
        ratioEstimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ratioEstimationButtonActionPerformed(evt);
            }
        });

        normalizationButton.setText("Normalization");
        normalizationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalizationButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout backgroundPanelLayout = new javax.swing.GroupLayout(backgroundPanel);
        backgroundPanel.setLayout(backgroundPanelLayout);
        backgroundPanelLayout.setHorizontalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(reporterIonSelectionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ratioEstimationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(normalizationButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(backgroundPanelLayout.createSequentialGroup()
                        .addGap(0, 119, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        backgroundPanelLayout.setVerticalGroup(
            backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(backgroundPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(reporterIonSelectionButton)
                .addGap(18, 18, 18)
                .addComponent(ratioEstimationButton)
                .addGap(18, 18, 18)
                .addComponent(normalizationButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 122, Short.MAX_VALUE)
                .addGroup(backgroundPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backgroundPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Save the data and close the dialog.
     *
     * @param evt
     */
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        canceled = true;
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void reporterIonSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reporterIonSelectionButtonActionPerformed
        ReporterIonSelectionSettingsDialog reporterIonSelectionSettingsDialog = new ReporterIonSelectionSettingsDialog(this, reporterIonSelectionSettings, reporterMethod, editable);
        if (!reporterIonSelectionSettingsDialog.isCanceled()) {
            reporterIonSelectionSettings = reporterIonSelectionSettingsDialog.getReporterIonSelectionSettings();
        }
    }//GEN-LAST:event_reporterIonSelectionButtonActionPerformed

    private void ratioEstimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ratioEstimationButtonActionPerformed
        RatioEstimationSettingsDialog ratioEstimationSettingsDialog = new RatioEstimationSettingsDialog(this, ratioEstimationSettings, modificationProfile, editable);
        if (!ratioEstimationSettingsDialog.isCanceled()) {
            ratioEstimationSettings = ratioEstimationSettingsDialog.getRatioEstimationSettings();
        }
    }//GEN-LAST:event_ratioEstimationButtonActionPerformed

    private void normalizationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalizationButtonActionPerformed
        NormalizationSettingsDialog normalizationSettingsDialog = new NormalizationSettingsDialog(this, ratioEstimationSettings, editable);
        if (!normalizationSettingsDialog.isCanceled()) {
            normalizationSettings = normalizationSettingsDialog.getNormalizationSettings();
        }
    }//GEN-LAST:event_normalizationButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton normalizationButton;
    private javax.swing.JButton okButton;
    private javax.swing.JButton ratioEstimationButton;
    private javax.swing.JButton reporterIonSelectionButton;
    private javax.swing.ButtonGroup reporterLocationButtonGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * Indicates whether the user canceled the editing.
     *
     * @return a boolean indicating whether the user canceled the editing
     */
    public boolean isCanceled() {
        return canceled;
    }

    /**
     * Returns the reporter settings as set by the user.
     *
     * @return the reporter settings as set by the user
     */
    public ReporterSettings getReporterSettings() {
        ReporterSettings reporterSettings = new ReporterSettings();
        reporterSettings.setReporterIonSelectionSettings(reporterIonSelectionSettings);
        reporterSettings.setRatioEstimationSettings(ratioEstimationSettings);
        reporterSettings.setNormalizationSettings(normalizationSettings);
        return reporterSettings;
    }

}
